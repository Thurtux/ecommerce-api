datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  // Relações
  cart      Cart?
  orders    Order[]
  reviews   Review[]
  wishlist  Wishlist? // Relação opcional: cada usuário pode ter uma wishlist
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}

model Product {
  id            String           @id @default(uuid())
  name          String
  description   String?
  price         Decimal
  stock         Int              @default(0)
  color         String
  size          String
  createdAt     DateTime         @default(now())
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  wishlistItems WishlistItem[] // Relação com os itens da wishlist
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int     @default(1)
}

model Order {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [id])
  userId       Int
  items        OrderItem[]
  total        Float
  shippingCost Float       @default(0.0)
  status       String      @default("pending")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}


model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int     @default(1)
  price     Float
}

model Coupon {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  discount  Float
  active    Boolean   @default(true)
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id        Int            @id @default(autoincrement())
  user      User           @relation(fields: [userId], references: [id])
  userId    Int            @unique // Cada usuário tem uma wishlist única
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  String // Mesmo tipo que o id em Product
  addedAt    DateTime @default(now())

  @@unique([wishlistId, productId])
}


model Payment {
  id            Int      @id @default(autoincrement())
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       Int
  amount        Float
  status        String   @default("pending") // pending, completed, failed
  paymentMethod String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
